!https://secure.travis-ci.org/inspire9/eventifier.png!:http://travis-ci.org/inspire9/eventifier

h1. Eventifier

Event tracking and notifying for active record models

h2. Features

Tracks and logs events on active record objects
Send notifications of events

h2. Example

<pre><code>
class EventTracking
  include Eventifier::EventTracking

  def initialize
    events_for Post do
      track_on [:create, :update, :destroy], attributes: { except: %w(updated_at) }
      notify group: :members, on: :create
      notify group: :commenters, on: :update, unless: ->post,author { post.age > 1.week }
    end

    events_for Announcement do
      track_on :create
      notify group: :members, on: :create, if: ->announcement,admin { announcement.is_important? }
    end
  end
end
</code></pre>

That's it!

h2. Installation

h4. Add Eventifier to your Gemfile

<pre><code>
  # Gemfile
  gem "eventifier"
</code></pre>

And run <code>bundle install</code>

h4. Add Eventifier to your Gemfile

<pre><code>
  rails generate eventifier:install
  rake eventifier:install:migrations
</code></pre>

h4. Add notifications indicator in interface

Eventifier provides a notification tool for your users.

<pre><code>
  <div class="notifications">
    <a href="#" class="notifications-toggle">
      <span class="icon-notifications"></span>
      <span class="notifications-alert"></span>
    </a>
  </div>
</code></pre>

<pre><code>
  # app/views/layouts/application.erb
  &lt;div class=&quot;notifications&quot;&gt;&lt;/div&gt;
</code></pre>

h4. Add stylesheets

<pre><code>
  # app/assets/stylesheets/application.scss
  /*= require eventifier/notifications*/
</code></pre>

h4. Add javascript

<pre><code>
  # app/assets/javascripts/application.coffee
  #= require eventifier/notifications

  new NotificationDropdown el: $(".notifications")
</code></pre>

h4. Add the required routes

<pre><code>
  # config/routes.rb
  mount Eventifier::Engine => '/'
</code></pre>

h4. Customise views

<pre><code>
  # app/views/eventifier/dropdown/_comment.haml
  %a{ href: "#{root_url}#{url_for([object.commentable.user, object.commentable])}" }
    = image_tag object.user.photo.thumb.url, class: 'avatar'
    #{object.user.username} commented on your post
</code></pre>

You can create a custom view for each context

Dropdown notification:  app/views/eventifier/dropdown/_comment.haml
Email notification:  app/views/eventifier/email/_comment.haml

Helpers made available to these views are:

*notification*: The notification object
Eventifier::Notification(event: event, user: user_being_notified, parent: parent_notification, sent: email_sent_flag)

*event*: The event object
Eventifier::Event(user: event_owner, eventable: object_for_event, verb: [:create, :update, :destroy], change_data: {"name" => ["Bill", "Bob"]}, groupable: grouped_object)

*object*: The object the event was created for

h2. Sending of emails

Firstly, you'll need to set the FROM address for the Eventifier mailer

<pre><code>
  # config/initializers/eventifier.rb
  Eventifier.mailer_sender = 'Funways <team@funways.me>'
</code></pre>


You want to add a scheduled task to run the following task every x minutes

<pre><code>
  rake eventifier:email:deliver
</code></pre>

h4. Customise email settings descriptions

<pre><code>
  # config/locales/events.en.yml
  en:
    events:
      labels:
        preferences:
          default: "All notifications"
          create_relationships_notify_followed: "When you get a new follower"
</code></pre>

h2. Requirements

* ActiveRecord

h2. Turbolinks

Turbolinks removes the body of the page, which is where our dropdown notifications box sits.  We'll need to re-render it and point it at the holding element when the page changes.

```
$ ->
  window.notifications = new NotificationDropdown el: $('.notifications'), pollTime: 60

$(document).on "page:change", ->
  notifications.el = $('.notifications')
  notifications.render()
```

h2. Testing

Creating the database:
* createdb eventifier

Spec
<pre><code>
  rspec spec
</code></pre>

h2. Contributors

* PJ Murray
